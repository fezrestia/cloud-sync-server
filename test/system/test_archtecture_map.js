// System Test for Architecture Map Web.

// ARGs. ([0] == "node", [1] == mocha, [2] == file name)
const IS_HEADLESS = process.argv.some( (arg) => {
  return arg == "--headless";
} );

// Target .html generated by npm run build.
const TARGET_URL = "http://localhost:8080/architecture_map.html";

const LOAD_TIMEOUT_MILLIS = 5000;

const selenium = require("selenium-webdriver");
const chrome = require("selenium-webdriver/chrome");
const expect = require("expect.js");
const assert = require("assert");
const By = selenium.By;
const until = selenium.until;
const { Condition } = require("selenium-webdriver/lib/webdriver");

/**
 * Prepare web driver instance. Must be release it after test done.
 *
 * @param isHeadless boolean Headless browser is required or not.
 * @return Object WebDriver instance.
 */
function prepareWebDriver(isHeadless) {
  const options = new chrome.Options();
  options.addArguments( [
      "--log-level=ALL",
      "--disable-dev-shm-usage",
      "--no-sandbox",
  ] );
  if (isHeadless) {
    options.addArguments( [
        "--headless",
        "--disable-gpu",
        "--window-size=1920,1080",
        "--allow-insecure-localhost",
        "--allow-running-insecure-content",
        "disable-infobars",
    ] );
  }

  const driver = new selenium.Builder()
      .forBrowser("chrome")
      .setChromeOptions(options)
      .build();
  return driver;
}

/**
 * Release web driver instance.
 *
 * @param webDriver Object Web driver instance.
 */
function releaseWebDriver(webDriver) {
  webDriver.quit();
}



//// E2E SYSTEM TEST ////

describe("Test Architecture Map Web", () => {
  var driver;
  var read = false;

  before( () => {
    driver = prepareWebDriver(IS_HEADLESS);
  } );

  after( () => {
    releaseWebDriver(driver);
  } );

  it("get root", async function() {
    await driver.get(TARGET_URL);

    let title = await driver.getTitle();

    expect(title).to.be("Architecture Map");

  } );



} );

