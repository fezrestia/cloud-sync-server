// System Test for Architecture Map Web.

import { prepareWebDriver, releaseWebDriver } from "./web_driver_loader";
import { WebDriver, ThenableWebDriver, By, WebElement, Condition } from "selenium-webdriver";
import { describe, before, after, it } from "mocha";
import { assert } from "chai";
import * as fs from "fs";

import { TestDef } from "../TestDef";

import { Def } from "../../src/architecture-map/javascript/Def";

// ARGs. ([0] == "node", [1] == mocha, [2] == file name)
const IS_HEADLESS = process.argv.some( (arg) => {
  return arg == "--headless";
} );

// Target .html generated by npm run build.
const TARGET_URL = "http://localhost:8080/architecture_map.html";

//// E2E SYSTEM TEST ////

describe("Test Architecture Map Web", () => {
  var driver: ThenableWebDriver;

  before( () => {
    cleanDownloadPath();
    driver = prepareWebDriver(IS_HEADLESS);
  } );

  after( () => {
    releaseWebDriver(driver);
  } );

  it("Get Root", async () => {
    await driver.get(TARGET_URL);

    let title = await driver.getTitle();
    assert.equal(title, "Architecture Map");

    let divRoot = await driver.findElement(By.id("root"));
    assert.isNotNull(divRoot);
    let svg = await divRoot.findElement(By.id("svg_root"));
    assert.isNotNull(svg);
    let html = await divRoot.findElement(By.id("html_root"));
    assert.isNotNull(html);

    let outFrame = await svg.findElement(By.id("out_frame"));
    assert.isNotNull(outFrame);

  } );

  it("Change Global Mode", async () => {
    await driver.get(TARGET_URL);

    // Elements.
    let ui = driver.findElement(By.id("god_mode_ui"));

    // Default = GOD.
    let label = await driver.findElement(By.id("global_mode_label"));
    let mode = await label.getText();
    assert.equal(mode, "GOD");
    assert.isTrue(await ui.isDisplayed());

    // Change to ITX.
    let itxModeButton = await driver.findElement(By.id("itx_mode"));
    itxModeButton.click();
    assert.isFalse(await ui.isDisplayed());

    // Change to GOD.
    let godModeButton = await driver.findElement(By.id("god_mode"));
    godModeButton.click();
    assert.isTrue(await ui.isDisplayed());

  } );

  it("Add New ArchMod", async () => {
    await driver.get(TARGET_URL);

    // Elements.
    let svg = driver.findElement(By.id("svg_root"));
    let html = driver.findElement(By.id("html_root"));
    let addButton = driver.findElement(By.id("add_archmod"));

    // Enable add new ArchMod mode.
    await addButton.click();
    // Add new ArchMod.
    await clickOnXY(driver, html, 100, 100);

    // Check.
    let archMod = await svg.findElement(By.id("archmod_ArchMod"));
    assert.isNotNull(archMod);

    // Download JSON.
    let curCount: number = getDownloadedFileFullPaths().length;
    let untilDownloadDone = new Condition("Failed to download", (driver: WebDriver) => {
      let latestCount: number = getDownloadedFileFullPaths().length;
      return latestCount  == (curCount + 1);
    } );
    let jsonButton = await driver.findElement(By.id("download_json"));
    await jsonButton.click();
    await driver.wait(untilDownloadDone, TestDef.LOAD_TIMEOUT_MILLIS);

    // Check JSON.
    let actJson = loadLatestDownloadedJson();
    let actArchJson = (actJson as any)[Def.KEY_ARCHITECTURE_MAP];
    let expArchJson = [
        {
          "class": "ArchMod",
           "label": "ArchMod",
           "dimens": {
             "x": 100,
             "y": 100,
             "width": 120,
             "height": 120,
             "pin_x": 160,
             "pin_y": 160,
             "label_rot_deg": 0
           },
           "clip_area": "none",
           "color_set": "gray"
        }
    ];
    assert.equal(actArchJson.toString(), expArchJson.toString());



  } );



  it("END", async () => {
  } );

} );

// X-Y coordinates based on TOP-LEFT.
async function clickOnXY(driver: ThenableWebDriver, element: WebElement, x: number, y: number) {
  let rect = await element.getRect();

  let originX: number = -1 * rect.width / 2;
  let originY: number = -1 * rect.height / 2;

  // WORKAROUND: y position may be float. So, modify 1 pixel.
  let diff = Math.ceil(rect.y) - Math.floor(rect.y);

  await driver.actions()
      .move( { // Move to origin of SVG and HTML root.
          origin: element,
          x: originX + x,
          y: originY + y + diff,
      } )
      .click()
      .perform();
}

function getDownloadedFileFullPaths(): string[] {
  let fullPaths: string[] = [];

  let files = fs.readdirSync(TestDef.DOWNLOAD_PATH);
  files.forEach( (file: string) => {
    fullPaths.push(`${TestDef.DOWNLOAD_PATH}/${file}`);
  } );

  return fullPaths;
}

function cleanDownloadPath() {
  console.log("## cleanDownloadPath() : E");

  let fullPaths = getDownloadedFileFullPaths();

  fullPaths.forEach( (fullPath: string) => {
    fs.unlinkSync(fullPath);
    console.log(`## DEL: ${fullPath}`);
  } );

  console.log("## cleanDownloadPath() : X");
}

function loadLatestDownloadedJson(): object {
  let fullPaths = getDownloadedFileFullPaths();
  fullPaths.sort();
  let latest = fullPaths[fullPaths.length - 1];
  let jsonString = fs.readFileSync(latest).toString();
  let json = JSON.parse(jsonString);
  return json;
}

